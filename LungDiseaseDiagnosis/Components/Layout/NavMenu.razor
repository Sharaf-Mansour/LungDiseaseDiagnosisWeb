@using LungDiseaseDiagnosis.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Security.Cryptography
@using LungDiseaseDiagnosis.Services
@using Microsoft.AspNetCore.Components.Authorization

@inject ProtectedLocalStorage ProtectedLocalStorage
@inject NavigationManager NavigationManager
@inject IUserService UserService

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">MedAI Diagnostics</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                @if (user != null)
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/settings">
                            <span class="navbar-text me-3">Welcome, @user.Name (@user.Type)</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <button class="btn btn-link nav-link" @onclick="Logout">Logout</button>
                    </li>
                }
                else
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/login">Login</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/signup">Sign Up</a>
                    </li>
                }
            </ul>
        </div>
    </div>
</nav>

@code {
    private User? user;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await ProtectedLocalStorage.GetAsync<User>("user");
            if (result.Success)
            {
                user = result.Value;
                UserService.CurrentUser = user;
            }
        }
        catch (CryptographicException)
        {
            // This can happen during prerendering, just ignore it.
        }
    }

    private async Task Logout()
    {
        await ProtectedLocalStorage.DeleteAsync("user");
        UserService.CurrentUser = null;
        NavigationManager.NavigateTo("/", forceLoad: true);
    }
}
